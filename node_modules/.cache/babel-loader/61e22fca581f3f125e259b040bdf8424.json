{"ast":null,"code":"var _jsxFileName = \"/home/tonybsilva/\\xC1rea de Trabalho/Leaf-Barber/frontend/src/hooks/ToastContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, createContext, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToastContainer from '../components/ToastContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToastContext = /*#__PURE__*/createContext({});\nexport const ToastProvider = ({\n  children\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const addToast = useCallback(({\n    title,\n    type,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n    setMessages(oldMessages => [...oldMessages, toast]);\n  }, []);\n  const removeToast = useCallback(() => {\n    console.log('removeToast');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ToastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToastProvider, \"B21RFwG32JC+fV89pZ9By69CAIM=\");\n\n_c = ToastProvider;\nexport function useToast() {\n  _s2();\n\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n\n  return context;\n}\n\n_s2(useToast, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ToastProvider\");","map":{"version":3,"sources":["/home/tonybsilva/√Årea de Trabalho/Leaf-Barber/frontend/src/hooks/ToastContext.tsx"],"names":["React","useCallback","createContext","useContext","useState","uuid","ToastContainer","ToastContext","ToastProvider","children","messages","setMessages","addToast","title","type","description","id","toast","oldMessages","removeToast","console","log","useToast","context","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,aAA7B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAcA,MAAMC,YAAY,gBAAGL,aAAa,CAAmB,EAAnB,CAAlC;AAEA,OAAO,MAAMM,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAEvD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAiB,EAAjB,CAAxC;AAEA,QAAMQ,QAAQ,GAAGX,WAAW,CAAC,CAAC;AAACY,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,GAAD,KAA0D;AACrF,UAAMC,EAAE,GAAGX,IAAI,EAAf;AAEA,UAAMY,KAAK,GAAG;AACZD,MAAAA,EADY;AAEZF,MAAAA,IAFY;AAGZD,MAAAA,KAHY;AAIZE,MAAAA;AAJY,KAAd;AAOAJ,IAAAA,WAAW,CAAEO,WAAD,IAAiB,CAAC,GAAGA,WAAJ,EAAiBD,KAAjB,CAAlB,CAAX;AACD,GAX2B,EAWzB,EAXyB,CAA5B;AAaA,QAAME,WAAW,GAAGlB,WAAW,CAAC,MAAM;AACpCmB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAF8B,EAE5B,EAF4B,CAA/B;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAET,MAAAA,QAAF;AAAYO,MAAAA;AAAZ,KAA9B;AAAA,eACGV,QADH,eAEE,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA3BM;;GAAMF,a;;KAAAA,a;AA6Bb,OAAO,SAASc,QAAT,GAAsC;AAAA;;AAC3C,QAAMC,OAAO,GAAGpB,UAAU,CAACI,YAAD,CAA1B;;AAEA,MAAI,CAACgB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;IAReD,Q","sourcesContent":["import React, { useCallback, createContext, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4'\nimport ToastContainer from '../components/ToastContainer';\n\nexport interface ToastMessage {\n  id: string;\n  type: 'success' | 'error' | 'info';\n  title: string;\n  description?: string\n}\n\ninterface ToastContextData {\n  addToast(message: Omit<ToastMessage, 'id'>): void;\n  removeToast(): void;\n}\n\nconst ToastContext = createContext<ToastContextData>({} as ToastContextData);\n\nexport const ToastProvider: React.FC = ({ children }) => {\n\n  const [messages, setMessages] = useState<ToastMessage[]>([])\n\n  const addToast = useCallback(({title, type, description}: Omit<ToastMessage, 'id'>) => {\n    const id = uuid()\n\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n\n    setMessages((oldMessages) => [...oldMessages, toast])\n  }, [])\n\n  const removeToast = useCallback(() => {\n    console.log('removeToast')\n  }, [])\n\n  return (\n    <ToastContext.Provider value={{ addToast, removeToast }} >\n      {children}\n      <ToastContainer messages={messages} />\n    </ToastContext.Provider>\n  )\n}\n\nexport function useToast(): ToastContextData {\n  const context = useContext(ToastContext)\n\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider')\n  }\n\n  return context\n}\n"]},"metadata":{},"sourceType":"module"}